# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_msgs/CommonHeader.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CommonHeader(genpy.Message):
  _md5sum = "9e2cebab6fb8a68faebdd0703445eea6"
  _type = "novatel_msgs/CommonHeader"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# On the wire, this header is preceeded by three sync bytes,
# which are 0xAA 0x44 0x12, and a uint8 which is the header length.

# Message ID of the log being output.
uint16 id

# Measurement source, format, response bit.
uint8 msg_type

uint8 port_addr
uint16 length
uint16 sequence

uint8 idle_time
uint8 time_status

uint16 gps_week
uint32 gps_week_seconds

# Table 3 in the SPAN on OEM6 manual.
# See: http://www.novatel.com/assets/Documents/Manuals/OM-20000144UM.pdf#page=13
uint32 receiver_status
uint32 RECEIVER_STATUS_ERROR=1
uint32 RECEIVER_STATUS_TEMPERATURE_WARNING=2
uint32 RECEIVER_STATUS_VOLTAGE_SUPPLY_WARNING=4
uint32 RECEIVER_STATUS_ANTENNA_UNPOWERED=8
uint32 RECEIVER_STATUS_LNA_FAILURE=16
uint32 RECEIVER_STATUS_ANTENNA_OPEN=32
uint32 RECEIVER_STATUS_ANTENNA_SHORTED=64
uint32 RECEIVER_STATUS_CPU_OVERLOADED=128
uint32 RECEIVER_STATUS_COM1_BUFFER_OVERRUN=256
uint32 RECEIVER_STATUS_COM2_BUFFER_OVERRUN=512
uint32 RECEIVER_STATUS_COM3_BUFFER_OVERRUN=1024
uint32 RECEIVER_STATUS_LINK_OVERLOAD=2048
uint32 RECEIVER_STATUS_AUX_TRANSMIT_OVERRUN=8192
uint32 RECEIVER_STATUS_AGC_OUT_OF_RANGE=16384
uint32 RECEIVER_STATUS_INS_RESET=65536
uint32 RECEIVER_STATUS_ALMANAC_INVALID=262144
uint32 RECEIVER_STATUS_POSITION_SOLUTION_INVALID=524288
uint32 RECEIVER_STATUS_POSITION_NOT_FIXED=1048576
uint32 RECEIVER_STATUS_CLOCK_STEERING_DISABLED=2097152
uint32 RECEIVER_STATUS_CLOCK_MODEL_INVALID=4194304
uint32 RECEIVER_STATUS_EXTERNAL_OSCILLATOR_LOCKED=8388608
uint32 RECEIVER_STATUS_SOFTWARE_RESOURCE_WARNING=16777216
uint32 RECEIVER_STATUS_AUXILIARY3_EVENT=536870912
uint32 RECEIVER_STATUS_AUXILIARY2_EVENT=1073741824
uint32 RECEIVER_STATUS_AUXILIARY1_EVENT=2147483648

uint16 reserved
uint16 software_version

"""
  # Pseudo-constants
  RECEIVER_STATUS_ERROR = 1
  RECEIVER_STATUS_TEMPERATURE_WARNING = 2
  RECEIVER_STATUS_VOLTAGE_SUPPLY_WARNING = 4
  RECEIVER_STATUS_ANTENNA_UNPOWERED = 8
  RECEIVER_STATUS_LNA_FAILURE = 16
  RECEIVER_STATUS_ANTENNA_OPEN = 32
  RECEIVER_STATUS_ANTENNA_SHORTED = 64
  RECEIVER_STATUS_CPU_OVERLOADED = 128
  RECEIVER_STATUS_COM1_BUFFER_OVERRUN = 256
  RECEIVER_STATUS_COM2_BUFFER_OVERRUN = 512
  RECEIVER_STATUS_COM3_BUFFER_OVERRUN = 1024
  RECEIVER_STATUS_LINK_OVERLOAD = 2048
  RECEIVER_STATUS_AUX_TRANSMIT_OVERRUN = 8192
  RECEIVER_STATUS_AGC_OUT_OF_RANGE = 16384
  RECEIVER_STATUS_INS_RESET = 65536
  RECEIVER_STATUS_ALMANAC_INVALID = 262144
  RECEIVER_STATUS_POSITION_SOLUTION_INVALID = 524288
  RECEIVER_STATUS_POSITION_NOT_FIXED = 1048576
  RECEIVER_STATUS_CLOCK_STEERING_DISABLED = 2097152
  RECEIVER_STATUS_CLOCK_MODEL_INVALID = 4194304
  RECEIVER_STATUS_EXTERNAL_OSCILLATOR_LOCKED = 8388608
  RECEIVER_STATUS_SOFTWARE_RESOURCE_WARNING = 16777216
  RECEIVER_STATUS_AUXILIARY3_EVENT = 536870912
  RECEIVER_STATUS_AUXILIARY2_EVENT = 1073741824
  RECEIVER_STATUS_AUXILIARY1_EVENT = 2147483648

  __slots__ = ['id','msg_type','port_addr','length','sequence','idle_time','time_status','gps_week','gps_week_seconds','receiver_status','reserved','software_version']
  _slot_types = ['uint16','uint8','uint8','uint16','uint16','uint8','uint8','uint16','uint32','uint32','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,msg_type,port_addr,length,sequence,idle_time,time_status,gps_week,gps_week_seconds,receiver_status,reserved,software_version

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CommonHeader, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.msg_type is None:
        self.msg_type = 0
      if self.port_addr is None:
        self.port_addr = 0
      if self.length is None:
        self.length = 0
      if self.sequence is None:
        self.sequence = 0
      if self.idle_time is None:
        self.idle_time = 0
      if self.time_status is None:
        self.time_status = 0
      if self.gps_week is None:
        self.gps_week = 0
      if self.gps_week_seconds is None:
        self.gps_week_seconds = 0
      if self.receiver_status is None:
        self.receiver_status = 0
      if self.reserved is None:
        self.reserved = 0
      if self.software_version is None:
        self.software_version = 0
    else:
      self.id = 0
      self.msg_type = 0
      self.port_addr = 0
      self.length = 0
      self.sequence = 0
      self.idle_time = 0
      self.time_status = 0
      self.gps_week = 0
      self.gps_week_seconds = 0
      self.receiver_status = 0
      self.reserved = 0
      self.software_version = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H2B2H2BH2I2H().pack(_x.id, _x.msg_type, _x.port_addr, _x.length, _x.sequence, _x.idle_time, _x.time_status, _x.gps_week, _x.gps_week_seconds, _x.receiver_status, _x.reserved, _x.software_version))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.id, _x.msg_type, _x.port_addr, _x.length, _x.sequence, _x.idle_time, _x.time_status, _x.gps_week, _x.gps_week_seconds, _x.receiver_status, _x.reserved, _x.software_version,) = _get_struct_H2B2H2BH2I2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H2B2H2BH2I2H().pack(_x.id, _x.msg_type, _x.port_addr, _x.length, _x.sequence, _x.idle_time, _x.time_status, _x.gps_week, _x.gps_week_seconds, _x.receiver_status, _x.reserved, _x.software_version))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.id, _x.msg_type, _x.port_addr, _x.length, _x.sequence, _x.idle_time, _x.time_status, _x.gps_week, _x.gps_week_seconds, _x.receiver_status, _x.reserved, _x.software_version,) = _get_struct_H2B2H2BH2I2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H2B2H2BH2I2H = None
def _get_struct_H2B2H2BH2I2H():
    global _struct_H2B2H2BH2I2H
    if _struct_H2B2H2BH2I2H is None:
        _struct_H2B2H2BH2I2H = struct.Struct("<H2B2H2BH2I2H")
    return _struct_H2B2H2BH2I2H
