# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_msgs/Ack.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Ack(genpy.Message):
  _md5sum = "f84607dc6beaf1cb6772d23af7221bdf"
  _type = "novatel_msgs/Ack"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 transaction
uint16 id

uint16 RESPONSE_NOT_APPLICABLE=0
uint16 RESPONSE_ACCEPTED=1
uint16 RESPONSE_ACCEPTED_TOO_LONG=2
uint16 RESPONSE_ACCEPTED_TOO_SHORT=3
uint16 RESPONSE_PARAM_ERROR=4
uint16 RESPONSE_NOT_APPLICABLE_IN_CURRENT_STATE=5
uint16 RESPONSE_DATA_NOT_AVAILABLE=6
uint16 RESPONSE_MESSAGE_START_ERROR=7
uint16 RESPONSE_MESSAGE_END_ERROR=8
uint16 RESPONSE_BYTE_COUNT_ERROR=9
uint16 RESPONSE_CHECKSUM_ERROR=10
uint16 response_code

uint8 PARAMS_NO_CHANGE=0
uint8 PARAMS_CHANGE=1
uint8 params_status

uint8[32] error_parameter_name
"""
  # Pseudo-constants
  RESPONSE_NOT_APPLICABLE = 0
  RESPONSE_ACCEPTED = 1
  RESPONSE_ACCEPTED_TOO_LONG = 2
  RESPONSE_ACCEPTED_TOO_SHORT = 3
  RESPONSE_PARAM_ERROR = 4
  RESPONSE_NOT_APPLICABLE_IN_CURRENT_STATE = 5
  RESPONSE_DATA_NOT_AVAILABLE = 6
  RESPONSE_MESSAGE_START_ERROR = 7
  RESPONSE_MESSAGE_END_ERROR = 8
  RESPONSE_BYTE_COUNT_ERROR = 9
  RESPONSE_CHECKSUM_ERROR = 10
  PARAMS_NO_CHANGE = 0
  PARAMS_CHANGE = 1

  __slots__ = ['transaction','id','response_code','params_status','error_parameter_name']
  _slot_types = ['uint16','uint16','uint16','uint8','uint8[32]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       transaction,id,response_code,params_status,error_parameter_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ack, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.transaction is None:
        self.transaction = 0
      if self.id is None:
        self.id = 0
      if self.response_code is None:
        self.response_code = 0
      if self.params_status is None:
        self.params_status = 0
      if self.error_parameter_name is None:
        self.error_parameter_name = b'\0'*32
    else:
      self.transaction = 0
      self.id = 0
      self.response_code = 0
      self.params_status = 0
      self.error_parameter_name = b'\0'*32

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3HB().pack(_x.transaction, _x.id, _x.response_code, _x.params_status))
      _x = self.error_parameter_name
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_32B().pack(*_x))
      else:
        buff.write(_get_struct_32s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.transaction, _x.id, _x.response_code, _x.params_status,) = _get_struct_3HB().unpack(str[start:end])
      start = end
      end += 32
      self.error_parameter_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3HB().pack(_x.transaction, _x.id, _x.response_code, _x.params_status))
      _x = self.error_parameter_name
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_32B().pack(*_x))
      else:
        buff.write(_get_struct_32s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.transaction, _x.id, _x.response_code, _x.params_status,) = _get_struct_3HB().unpack(str[start:end])
      start = end
      end += 32
      self.error_parameter_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_32B = None
def _get_struct_32B():
    global _struct_32B
    if _struct_32B is None:
        _struct_32B = struct.Struct("<32B")
    return _struct_32B
_struct_32s = None
def _get_struct_32s():
    global _struct_32s
    if _struct_32s is None:
        _struct_32s = struct.Struct("<32s")
    return _struct_32s
_struct_3HB = None
def _get_struct_3HB():
    global _struct_3HB
    if _struct_3HB is None:
        _struct_3HB = struct.Struct("<3HB")
    return _struct_3HB
